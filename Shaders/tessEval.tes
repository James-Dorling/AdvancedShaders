#version 450 core
layout(triangles, equal_spacing, ccw) in;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2);
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2);

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

in TC_OUT
{
	vec3 tcNormal;
	vec2 tcUV;
	vec3 tcFragPos;
}te_in[];

//out vec3 teNormal;
//out vec3 tePos;

out TE_OUT
{
	vec3 teNormal;
	vec3 teFragPos;
	vec2 teUV;
}te_out;

void main()
{
	te_out.teNormal = interpolate3D(te_in[0].tcNormal, te_in[1].tcNormal, te_in[2].tcNormal);
	te_out.teFragPos = interpolate3D(te_in[0].tcFragPos, te_in[1].tcFragPos, te_in[2].tcFragPos);
	te_out.teUV = interpolate2D(te_in[0].tcUV, te_in[1].tcUV, te_in[2].tcUV);
	gl_Position = projection * view * vec4(te_out.teFragPos, 1.0);
}

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}